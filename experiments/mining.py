#!/usr/bin/python

# ----------------------------------------------------------------------------
# Author:      Jasper Robeer (3802337)
# Description: Implementation of the frequent itemset mining experiment,
#              comparing Toivonen's bounds to the d-bound.
#              As part of the Big Data course at Utrecht University (2017).
# ----------------------------------------------------------------------------

from sys import argv
from fim import fim
from math import log, floor, sqrt
from operator import itemgetter
import time
import csv
import random
import numpy

# ----------------------------------------------------------------------------

# Parses a .dat dataset into a format useable by fim
# The 'rep' parameter indicates how many times the data set should be replicated
def parse_dat(fname, rep=1):
    result = []
    rep_result = []
    line_count = 0

    with open(fname) as inp:
        for line in inp:
            line_count += 1
            items = line.split()
            if len(items) > 0:
                result.append(map(int, items))
    
    print('[+] parsed {:,} lines'.format(line_count))
    if rep > 1:
        print('[+] blowing up transactions {:,} times'.format(rep))
        for i in xrange(rep):
            rep_result.extend(result)
    else:
        rep_result = result

    print('[+] found {:,} transactions'.format(len(rep_result)))
    return rep_result

# ----------------------------------------------------------------------------

# Computes the Toivonen's bound
def toivonen_bound(epsilon, delta):
    return int((1.0/(2.0 * epsilon * epsilon))*log(2.0/delta))

# Computes the threshold lowering for Toivonen
def toivonen_threshold(size, mu):
    return int(sqrt((1.0/2.0*size)*log(1.0/mu)))

# Computes the d-bound
def dbound_bound(size, epsilon, delta, d_index, c):
    opt = ((4.0 * c)/(epsilon * epsilon)) * (d_index + log(1.0/delta))
    return int(min(size, opt))

# ----------------------------------------------------------------------------

# Returns a sample of size n of the data set, sampled with replacement
def sample_n(transactions, n):
    sample = []
    for i in xrange(n):
        sample.append(random.choice(transactions))
    return sample

def fi_to_set(report):
    return set(map(itemgetter(0), report))

# Compares two frequent itemsets from their reports (generated by the PyFIM
# functions), and returns their likeliness
# We assume that the reports are iterable, where each element contains a single
# frequent itemset
def compare_fis(report_a, report_b):
    fi_a = fi_to_set(report_a)
    fi_b = fi_to_set(report_b)
    return fi_a.intersection(fi_b)

# Calculates the percentage of b/a
def percentage(a, b):
    if a == 0.0 or b == 0.0:
        return 0.0
    else:
        return 100.0 * (float(b)/float(a))

# ----------------------------------------------------------------------------

def experiment(transactions, epsilon, delta, mu, supp, rep):
    results = []
    for r in xrange(rep):
        ts = time.time()
        
        # Compute the bounds
        t_bound = toivonen_bound(epsilon, delta)
        d_bound = dbound_bound(len(transactions), epsilon, delta, float(d_index), 0.5)
        print('[+] Performing experiment {}/{}. (epsilon: {}, delta: {}, mu: {}, support: {})'.format(
            r+1, rep, epsilon, delta, mu, supp))
        
        # Draw a sample --- Toivonen's bound
        sample = sample_n(transactions, t_bound)
        threshold = toivonen_threshold(len(sample), mu)
        print('[|] Toivonen\'s bound sample size: {:,} ({})'.format(len(sample), threshold))
        t_fi = fim(sample, supp=supp, zmin=2)
        t_fi_size = len(t_fi)
        print('[|] Frequent itemsets found {}'.format(t_fi_size))

        # Draw a sample --- d-bound
        sample = sample_n(transactions, d_bound)
        print('[|] d-bound sample size: {:,}'.format(len(sample)))
        d_fi = fim(sample, supp=supp, zmin=2)
        d_fi_size = len(d_fi)
        print('[|] Frequent itemsets found {}'.format(d_fi_size))
        
        print('[+] Comparing the frequent itemsets')
        fi_common = compare_fis(t_fi, d_fi)
        fi_common_size = len(fi_common)
        percent = numpy.mean([percentage(t_fi_size, fi_common_size), percentage(d_fi_size, fi_common_size)])
        print('[|] {} frequent itemsets in common ({:.2f}%)'.format(fi_common_size, percent))

        # Finish the experiment
        te = time.time()
        milliseconds = (te - ts) * 1000.0
        print('[+] Experiment duration: {:.4f} ms'.format(milliseconds))
        print('')
        results.append([epsilon,
                        delta,
                        mu,
                        t_bound,
                        t_fi_size,
                        threshold,
                        d_bound,
                        d_fi_size,
                        fi_common_size,
                        percent,
                        milliseconds])
    
    return numpy.mean(results, axis=0).tolist()

# ----------------------------------------------------------------------------

if len(argv) < 3:
    print('usage: mining.py filename d-index [repeat] [replication]')
    exit()

fname       = argv[1]                       # filename
d_index     = int(argv[2])                  # d-index of the data set
epsilon     = [0.01, 0.015, 0.02, 0.025]    # accuracy parameter
delta       = [0.01, 0.05, 0.1]             # confidence parameter
mu          = [0.01, 0.05, 0.1]             # used by Toivonen's bound
supp        = [75, 90]                      # minimum support threshold (PyFIM)
repeat      = 1                             # (default) times to repeat the experiments
replication = 1                             # (default) times to replicate the data set

if len(argv) > 3:
    repeat = int(argv[3])
if len(argv) > 4:
    replication = int(argv[4])

transactions     = parse_dat(fname, replication)
transactions_len = len(transactions)

csv_fname = 'result-{}-x{}.csv'.format(fname, replication)
csv_data  = [[
    'epsilon',
    'delta',
    'mu',
    'toivonen',
    'toivonen_fi_size',
    'toivonen_threshold',
    'd-bound',
    'd-bound_fi_size',
    'common_size',
    'common_precent',
    'milliseconds']]

print('[+] Performing {:,} experiments'.format(len(epsilon)*len(delta)*len(mu)*len(supp)))
print('')

for e in epsilon:
    for d in delta:
        for m in mu:
            csv_data.append(experiment(transactions, e, d, m, 75, repeat))

with open(csv_fname, 'wb') as f:
    writer = csv.writer(f, delimiter=';')
    for line in csv_data:
        writer.writerow(line)

print('[+] Wrote results to {}'.format(csv_fname))
